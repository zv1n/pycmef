// Generated by CoffeeScript 1.6.2
(function() {
  var CMEF;

  CMEF = (function() {
    CMEF.$NO_EVENT_HANDLER = '$ERROR:no_event_handler';

    function CMEF() {
      this.events = {};
      this.event_count = 0;
      this.times = {};
      this.mark('load');
    }

    CMEF.prototype.initialize_experiment = function() {
      var _this = this;

      _experiment.on_event_response.connect(function(event, response) {
        _this.event_count++;
        return _this.handle_event_response(event, response);
      });
      this.load_data();
      this.initialized = true;
      this.handle_event_response('ready', {});
      this.default_methods();
      this.auto_populate('attribute', function(target, value) {
        var attr;

        attr = target.data('attribute');
        return target.attr(attr, value);
      });
      this.auto_populate('content', function(target, value) {
        return target.html(value);
      });
      this.auto_template();
      this.auto_enable();
      this.auto_eyetracker();
      this.auto_input();
    };

    CMEF.prototype.load_data = function() {
      this.current = JSON.parse(_experiment.current);
      this.data = JSON.parse(_experiment.dataset);
      this.subsection = JSON.parse(_experiment.subsection);
      this.experiment = JSON.parse(_experiment.experiment);
    };

    CMEF.prototype.mark = function(name) {
      return this.times[name] = (new Date()).getTime();
    };

    CMEF.prototype.default_methods = function() {
      var _this = this;

      $('#next[data-default="true"]').click(function(event) {
        _this.mark('submit');
        return _this.submit(_this.collect_response());
      });
    };

    CMEF.prototype.submit = function(content) {
      var cb, _i, _len, _ref;

      _ref = this.on_next;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cb = _ref[_i];
        cb();
      }
      return this.emit('next', content);
    };

    CMEF.prototype.auto_input = function() {
      var target, _i, _len, _ref, _results;

      _ref = $('[data-input]');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        _results.push(this.input_selectors($(target).data('input').split(',')));
      }
      return _results;
    };

    CMEF.prototype.auto_eyetracker = function() {
      var _this = this;

      if ($('body').data('eyetracker')) {
        this.emit('screen_capture');
        this.emit('start_eyetracker');
        this.before_submit(function() {
          return _this.emit('stop_eyetracker');
        });
      }
    };

    CMEF.prototype.auto_populate = function(type, modifier) {
      var render, target, value, _i, _len, _ref;

      _ref = $("[data-" + type + "]");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        target = $(target);
        value = target.data('value');
        render = target.data('render');
        if (!render) {
          render = Handlebars.compile(value);
          target.data('render', render);
        }
        modifier(target, render({
          data: this.current
        }));
      }
    };

    CMEF.prototype.auto_template = function() {
      var $target, rendered, target, _i, _len, _ref;

      _ref = $("[type='text/x-handlebars-template']");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        $target = $(target);
        rendered = $(Handlebars.compile($target.html())({
          data: this.current
        }));
        $(target.parentNode).append(rendered);
      }
    };

    CMEF.prototype.auto_enable = function() {
      var $target, selector, target, _i, _len, _ref;

      _ref = $("[data-enable-on]");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        $target = $(target);
        $target.addClass('pure-button-disabled');
        selector = $target.data('enable-on');
        $(selector).data('enable-target', target).change(function() {
          return $target.removeClass('pure-button-disabled');
        });
      }
    };

    CMEF.prototype.input_selectors = function(sels) {
      var f, _i, _len, _results;

      this.iselectors || (this.iselectors = []);
      if (!(sels instanceof Array)) {
        sels = [sels];
      }
      _results = [];
      for (_i = 0, _len = sels.length; _i < _len; _i++) {
        f = sels[_i];
        _results.push(this.iselectors.push(f));
      }
      return _results;
    };

    CMEF.prototype.collect_response = function() {
      var $target, cor, res, sel, _i, _len, _ref;

      res = {};
      res.times = this.times;
      res.data = this.current;
      _ref = this.iselectors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sel = _ref[_i];
        $target = $(sel);
        res[$target.attr('name')] = $target.val();
      }
      cor = res.data.question.correct.toString() === res.answer.toString();
      console.log(cor);
      res.correct = cor;
      return res;
    };

    CMEF.prototype.ready = function(cb) {
      return this.add_event_callback('ready', cb);
    };

    CMEF.prototype.before_submit = function(cb) {
      this.on_next || (this.on_next = []);
      return this.on_next.push(cb);
    };

    CMEF.prototype.experiment = function() {
      return JSON.parse(_experiment.experiment);
    };

    CMEF.prototype.handle_event_response = function(event, response) {
      var cb, cbs, _i, _len, _results;

      if (this.events.hasOwnProperty(event)) {
        cbs = this.events[event];
      }
      this.events[event] = [];
      if (!cbs) {
        return;
      }
      _results = [];
      for (_i = 0, _len = cbs.length; _i < _len; _i++) {
        cb = cbs[_i];
        _results.push(cb(response));
      }
      return _results;
    };

    CMEF.prototype.add_event_callback = function(event, cb) {
      if (!this.events.hasOwnProperty(event)) {
        this.events[event] = [];
      }
      if (cb instanceof Function) {
        this.events[event].push(cb);
      }
    };

    CMEF.prototype.emit = function(event, cb_or_args, cb) {
      var args;

      if (cb_or_args instanceof Function) {
        cb = cb_or_args;
        cb_or_args = '';
      } else if (cb_or_args instanceof Object) {
        cb_or_args = JSON.stringify(cb_or_args);
      }
      args = cb_or_args;
      this.add_event_callback(event, cb);
      _experiment.emit(event, args);
    };

    return CMEF;

  })();

  window.cmef = new CMEF();

  window.on_python_ready = function() {
    var instantiate_cmef, load_js;

    load_js = function(path, callback) {
      var head, script;

      head = document.getElementsByTagName("head")[0];
      script = document.createElement("script");
      script.type = "text/javascript";
      script.src = path;
      script.onreadystatechange = callback;
      script.onload = callback;
      head.appendChild(script);
    };
    instantiate_cmef = function() {
      cmef.initialize_experiment();
      return cmef.emit("show", function(response) {
        cmef.mark('show');
        return $(".show-on-load").show();
      });
    };
    return load_js("../cmef/jquery.js", function() {
      return load_js("../cmef/handlebars.js", instantiate_cmef);
    });
  };

}).call(this);
